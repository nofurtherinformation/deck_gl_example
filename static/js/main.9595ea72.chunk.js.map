{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","App","useState","tracts","setTracts","nta","setNta","layers","filter","l","map","GeoJsonLayer","id","name","data","geojson","getFillColor","f","properties","shape_area","getLineColor","stroked","lineWidthUnits","layersToDeckGL","useEffect","fetch","then","r","json","result","className","controller","initialViewState","style","width","height","mapboxApiAccessToken","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAQMA,EAAqB,CACzBC,WAAY,OACZC,SAAU,QACVC,KAAM,GACNC,MAAO,EACPC,QAAS,GAyDIC,MAzCf,WAAgB,IAAD,EACeC,qBADf,mBACNC,EADM,KACEC,EADF,OAESF,qBAFT,mBAENG,EAFM,KAEDC,EAFC,KAIPC,EAfe,SAACA,GACtB,OAAOA,EAAOC,QAAO,SAAAC,GAAC,OAAEA,KAAGC,KAAI,SAAAD,GAAC,OAAG,IAAIE,IAAa,CAChDC,GAAGH,EAAEI,KACLC,KAAML,EAAEM,QACRC,aAAwB,QAAVP,EAAEI,KAAiB,CAAC,IAAI,IAAI,IAAI,GAAK,SAACI,GAAD,MAAU,CAACA,EAAEC,WAAWC,WAAW,IAAO,IAAI,IAAK,MACtGC,aAAwB,QAAVX,EAAEI,KAAgB,CAAC,IAAI,EAAE,EAAE,KAAO,CAAC,EAAE,EAAE,EAAE,KACvDQ,SAAS,EACTC,eAAe,cAQJC,CAAe,CAACpB,EAAOE,IAatC,OAZAmB,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UACVF,MAAK,SAAAG,GAAM,OAAIzB,EAAU,CAACS,KAAK,gBAAiBE,QAAQc,SAC3D,IAEFL,qBAAU,WACRC,MAAM,uBACHC,MAAK,SAAAC,GAAC,OAAEA,EAAEC,UACVF,MAAK,SAAAG,GAAM,OAAIvB,EAAO,CAACO,KAAK,MAAOE,QAAQc,SAC9C,IAGA,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,YAGf,qBAAKA,UAAU,MAAf,SAEA,cAAC,IAAD,CACEC,YAAY,EACZC,iBAAkBrC,EAClBY,OAAQA,EACR0B,MAAO,CAACC,MAAM,OAAQC,OAAO,QAJ/B,SAME,cAAC,IAAD,CACEC,qBACG,2GC/CEC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9595ea72.chunk.js","sourcesContent":["import React, {useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DeckGL from '@deck.gl/react';\nimport { StaticMap } from 'react-map-gl';\nimport { GeoJsonLayer } from '@deck.gl/layers';\n\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -74.006,\n  latitude: 40.7128,\n  zoom: 10,\n  pitch: 0,\n  bearing: 0,\n};\n\n\n\nconst layersToDeckGL = (layers: any[])=>{\n  return layers.filter(l=>l).map(l=>(new GeoJsonLayer({\n      id:l.name,\n      data: l.geojson,\n      getFillColor: l.name ==='nta' ?  [200,200,200,0] : (f:any)=> [f.properties.shape_area/10000, 255,255, 255],\n      getLineColor: l.name ==='nta' ? [255,0,0,255] : [0,0,0,255],\n      stroked: true ,\n      lineWidthUnits:'pixels'\n  })))\n}\n\nfunction App() {\n  const [tracts, setTracts] = useState<any | null>();\n  const [nta, setNta] = useState<any | null>();\n\n  const layers = layersToDeckGL([tracts,nta]) \n  useEffect(()=>{\n    fetch(\"/layers/2010_census_tracts.geojson\")\n      .then(r=>r.json())\n      .then(result => setTracts({name:'census_tracts', geojson:result}))\n  },[])\n\n  useEffect(()=>{\n    fetch(\"/layers/nta.geojson\")\n      .then(r=>r.json())\n      .then(result => setNta({name:'nta', geojson:result}))\n  },[])\n\n  return (\n    <div className=\"App\">\n      <div className='sidebar'>\n\n      </div>\n      <div className='map'>\n\n      <DeckGL\n        controller={true}\n        initialViewState={INITIAL_VIEW_STATE}\n        layers={layers}  \n        style={{width:'100%', height:\"100%\"}}\n      >\n        <StaticMap   \n          mapboxApiAccessToken={\n             'pk.eyJ1Ijoic3R1YXJ0LWx5bm4iLCJhIjoiY2ttNDZsdTVuMDFrazJ2b2Z6bmV0dDlpZiJ9.VHg-mUZEYo4shwH4s_QnKA'\n          }\n        />\n      </DeckGL>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}